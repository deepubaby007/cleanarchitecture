<#@ template language="C#" hostspecific="true" #>
<# string paramNameSpace = this.Host.ResolveParameterValue("", "", "nameSpace");#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using MediatR;
//using <# this.Write(paramNameSpace.Split('.')[0]); this.Write(".Application;"); this.Write("\n"); #>
//using <# this.Write(paramNameSpace.Split('.')[0]); this.Write(".Domain;"); this.Write("\n"); #>

namespace <# this.Write(paramNameSpace); this.Write("\n"); #>
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
			services.AddApiVersioning(apiversion =>
            {
                apiversion.ReportApiVersions = true;
                apiversion.AssumeDefaultVersionWhenUnspecified = true;
                apiversion.DefaultApiVersion = new ApiVersion(1, 0);
            });
			
            services.AddControllers();
	        services.AddMediatR(typeof(Startup).Assembly);
	        //services.AddScoped<IRequestHandler<ExampleRequestQuery, ResponseMessage<string>>, ExampleRequestQueryHandler>();
			
            services.AddSwaggerGen(swaggergen =>
            {
                swaggergen.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Version = "v1" });
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseStaticFiles();

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            app.UseSwagger();

            app.UseSwaggerUI(swaggerui =>
            {
                swaggerui.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
                swaggerui.InjectJavascript("/swagger/swaggercustom.js", "text/javascript");
                swaggerui.RoutePrefix = string.Empty;
            });
        }
    }
}